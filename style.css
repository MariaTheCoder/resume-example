:root {
  /* colors */
  --clr-neutral-100: hsla(0, 0%, 100%, 1);
  --clr-primary-800: hsla(229, 47%, 17%, 1);
  --clr-primary-700: hsla(229, 43%, 20%, 1);
  --clr-primary-400: hsla(230, 50%, 58%, 0.3);
  --clr-primary-300: hsla(229, 36%, 39%, 1);
  --clr-primary-200: hsla(229, 21%, 53%, 1);
  --clr-accent-400: hsla(147, 93%, 43%, 1);
  --clr-secondary-400: hsla(229, 78%, 60%, 1);

  /* font family */
  --ff-base: "Outfit Variable", sans-serif;

  /* font weights */
  --fw-regular: 300;
  --fw-semi-bond: 400;
  --fw-bold: 700;

  /* font size */
  --fs-200: 0.875rem;
  --fs-300: 1rem;
  --fs-400: 1.125rem;
  --fs-500: 1.375rem;
  --fs-600: 1.75rem;
  --fs-700: 3.25rem;
}

/* basic reset for all elements of the DOM as well as their psuedo elements*/
*,
*::before,
*::after {
  box-sizing: border-box;
  padding: 0;
}

/* basic reset for img and svg elements, as well as pictures and videos*/
img,
svg,
picture,
video {
  max-width: 100%;
  display: block;
}

/* set dark theme */
html {
  color-scheme: dark;
}

/* use custom variables for styling of the body element */
body {
  background-color: var(--clr-primary-700);
  color: var(--clr-neutral-100);
  font-family: var(--ff-base);
  font-size: var(--fs-400);
  font-weight: var(--fw-regular);
  line-height: 1.5;
  margin: 0;
}

.visually-hidden {
  clip: rect(0 0 0 0);
  clip-path: insert(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.main-grid {
  /* use the clamp function to set the at minimum allowed margin, the preferred valuea nd then the maximum value
  Note that we might come back later and change these numbers */
  --_aside-width: clamp(7.5rem, 20vw, 15rem);
  --_main-width: 1fr;
  --_gap-size: 10vw;

  display: grid;
  grid-template-columns: var(--_aside-width) var(--_main-width);
  gap: var(--_gap-size);
  grid-auto-flow: dense;
  align-items: center;
  /* the first value set for min-height acts as a fallback in case the unit dvh is not supported by the browser */
  min-height: 100vh;
  /* unit used for small viewports with interfaces that are dynamically expanded and retracted, e.g. smartphone screens. 
  By using dynamic viewport units, the size will automatically adjust in response to the browser UI state */
  min-height: 100dvh;
}

main {
  padding: 2rem 0;
  grid-column: 2;
  width: calc(100vw - var(--_gap-size) - var(--_aside-width));
}

aside {
  grid-column: 1;
  align-self: stretch;
  display: flex;
  justify-content: flex-end;
}

.eyebrow {
  color: var(--clr-secondary-400);
  font-size: var(--fs-300);
  font-weight: var(--fw-bold);
  text-transform: uppercase;
  letter-spacing: 0.2em;
  margin: 0;
}

.page-title {
  font-size: var(--fs-700);
  text-transform: uppercase;
  margin: 0;
  line-height: 1;
}

.intro {
  font-size: var(--fs-500);
  max-width: 75ch;
}

.job-experience {
  display: grid;
  justify-content: start;
  gap: 1rem;
  grid-auto-flow: column;
  position: relative;
  overflow-x: auto;
  padding: 2rem 0;
}

.job-experience::-webkit-scrollbar {
  /* set a specific height to the scrollbar */
  height: 0.75rem;
}

.job-experience::-webkit-scrollbar-track {
  /* set a dark color for track / the progress bar of the scrollbar */
  background-color: var(--clr-primary-800);
  border-radius: 100vw;
}

.job-experience::-webkit-scrollbar-thumb {
  /* give the draggable scrolling handle a noticable color and make it pill-shaped */
  background-color: var(--clr-accent-400);
  border-radius: 100vw;
}

.job-experience::after {
  content: "";
  width: 50px;
  background: transparent;
}

.job {
  width: 28.5rem;
  border-radius: 0.25rem;
  padding: 2rem;
  background: var(--clr-primary-800);
}

.job * {
  margin: 0;
}

.job:first-child::before {
  content: "Current role";
  position: absolute;
  color: var(--clr-accent-400);
  top: 0;
  left: 0;
}

.job > h2,
span {
  min-height: 4.2rem;
}

.job-info {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.year {
  color: var(--clr-accent-400);
  font-size: var(--fs-300);
  font-weight: var(--fw-bold);
  letter-spacing: 0.15rem;
}

.role {
  font-size: var(--fs-600);
  line-height: 1.2;
}

.company {
  text-align: end;
  color: var(--clr-primary-200);
  font-size: var(--fs-300);
  font-weight: var(--fw-bold);
  text-transform: uppercase;
}

.icon-list {
  height: 100%;
  border-left: 1px solid var(--clr-primary-300);
  margin: 0;

  list-style: none;
  display: grid;
  align-content: center;
  gap: 3rem;
}

.icon {
  height: 100px;
  width: auto;
}

.icon-list > li {
  position: relative;
  padding-left: 1rem;
}

.icon-list > li::after {
  content: "";
  position: absolute;

  /* Relocate the individual pseudo elements relative to the li elements */
  top: 3rem;
  left: 0;

  /* specify width and then use aspect-ratio to declare the relationship between width and height
  By doing this, we are saying that there is a 1 to 1 ratio between width and height*/
  width: 0.5rem;
  aspect-ratio: 1;
  background: var(--clr-neutral-100);
  border-radius: 50%;

  /* by using transform, we can move the position of our pseudo elements on the horizontal plane. 
  In our case, we want to move the elements to the left by an amount corresponding to half the width of the elements, therefore by -50% */
  transform: translateX(-50%);

  /* use outline to draw a line around the pseudo elements. The distance between the pseudo elements and the outline is given, give the outline a style of solid and set the color to one of the previously defined custom variables */
  outline: 0.5rem solid var(--clr-primary-400);
}

/* use of media query for responsive design */
@media (max-width: 820px) {
  .main-grid {
    grid-template-columns: 0 1fr;
    gap: 0;
  }

  main {
    padding: 1rem 1rem;
    width: 100vw;
  }

  aside {
    display: none;
  }

  .job-experience::after {
    display: none;
  }

  .job {
    width: calc(100vw - 2rem);
  }
}
